{"version":3,"sources":["../../src/common/Game.js"],"names":["BITE_WIDTH","COUNTS_TO_WIN","PLATE_BITES","PLAYER_WIDTH_BUFFER","PLAYERS_COUNT","initBites","game","controls","KeyboardControls","renderer","clientEngine","order","shuffle","bites","document","querySelector","forEach","o","button","createElement","classList","add","setAttribute","innerHTML","addEventListener","ev","querySelectorAll","length","contains","sendInput","b","remove","appendChild","initPlayers","players","i","player","arr","currentIndex","randomIndex","temporaryValue","Math","floor","random","Plate","gameEngine","options","props","blocked","count","other","Object","assign","type","BaseTypes","TYPES","INT16","DynamicObject","Game","physicsEngine","SimplePhysicsEngine","on","gameLogic","bind","serverSideInit","serverSidePlayerJoined","serverSidePlayerDisconnected","clientSideInit","clientSideDraw","serializer","registerClass","plates","world","queryObjects","instanceType","p","inputData","playerId","plate","queryObject","input","initValues","addObjectToWorld","joined","removeObjectFromWorld","id","plateElement","style","width","join","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, BaseTypes, DynamicObject, KeyboardControls, SimplePhysicsEngine } from 'lance-gg'\n\nconst BITE_WIDTH = 20\nconst COUNTS_TO_WIN = 10\nconst PLATE_BITES = 9\nconst PLAYER_WIDTH_BUFFER = 60\nconst PLAYERS_COUNT = 20\n\nconst initBites = game => {\n  game.controls = new KeyboardControls(game.renderer.clientEngine)\n\n  const order = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n  shuffle(order)\n\n  const bites = document.querySelector('#bites')\n\n  order.forEach(o => {\n    const button = document.createElement('button')\n\n    button.classList.add('bite')\n\n    button.setAttribute('data-order', o)\n\n    button.innerHTML = 'bite ' + o\n\n    button.addEventListener('click', ev => {\n      if (o !== document.querySelectorAll('.bite.hidden').length) {\n        return true\n      }\n\n      if (button.classList.contains('blocked')) {\n        return true\n      }\n\n      button.classList.add('hidden')\n\n      game.controls.clientEngine.sendInput('bite')\n\n      if (o === PLATE_BITES - 1) {\n        document.querySelectorAll('.bite').forEach(b => b.classList.remove('hidden'))\n      }\n    })\n\n    bites.appendChild(button)\n  })\n}\n\nconst initPlayers = game => {\n  const players = document.querySelector('#players')\n\n  for (let i = 0; i < PLAYERS_COUNT; i++) {\n    const player = document.createElement('div')\n\n    player.classList.add('player', 'hidden')\n\n    player.setAttribute('id', 'player' + i)\n\n    players.appendChild(player)\n  }\n}\n\nconst shuffle = arr => {\n  let currentIndex = arr.length\n  let randomIndex\n  let temporaryValue\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n\n    // And swap it with the current element.\n    temporaryValue = arr[currentIndex]\n    arr[currentIndex] = arr[randomIndex]\n    arr[randomIndex] = temporaryValue\n  }\n\n  return arr\n}\n\n// A paddle has a health attribute\nclass Plate extends DynamicObject {\n  constructor (gameEngine, options, props) {\n    super(gameEngine, options, props)\n\n    this.bites = 0\n    this.blocked = 0\n    this.count = 0\n  }\n\n  static get netScheme () {\n    return Object.assign({\n      bites: { type: BaseTypes.TYPES.INT16 },\n      count: { type: BaseTypes.TYPES.INT16 }\n    }, super.netScheme)\n  }\n\n  syncTo (other) {\n    super.syncTo(other)\n\n    this.bites = other.bites\n    this.count = other.count\n  }\n}\n\nexport default class Game extends GameEngine {\n  constructor (options) {\n    super(options)\n    this.physicsEngine = new SimplePhysicsEngine({ gameEngine: this })\n\n    // common code\n    this.on('postStep', this.gameLogic.bind(this))\n\n    // server-only code\n    this.on('server__init', this.serverSideInit.bind(this))\n    this.on('server__playerJoined', this.serverSidePlayerJoined.bind(this))\n    this.on('server__playerDisconnected', this.serverSidePlayerDisconnected.bind(this))\n\n    // client-only code\n    this.on('client__rendererReady', this.clientSideInit.bind(this))\n    this.on('client__draw', this.clientSideDraw.bind(this))\n  }\n\n  registerClasses (serializer) {\n    serializer.registerClass(Plate)\n  }\n\n  gameLogic () {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    if (plates.length < 2) {\n      return\n    }\n\n    plates.forEach((p, i) => {\n      if (p.bites === PLATE_BITES) {\n        p.count++\n        p.bites = 0\n\n        if (p.count === COUNTS_TO_WIN) {\n        }\n      }\n    })\n  }\n\n  processInput (inputData, playerId) {\n    super.processInput(inputData, playerId)\n\n    // get the player paddle tied to the player socket\n    const plate = this.world.queryObject({ playerId })\n    if (plate) {\n      if (inputData.input === 'bite') {\n        plate.bites++\n      }\n    }\n  }\n\n  //\n  // SERVER ONLY CODE\n  //\n  serverSideInit () {\n    const initValues = {\n      bites: 0,\n      blocked: false,\n      count: 0,\n      playerId: 0\n    }\n\n    for (let i = 0; i < PLAYERS_COUNT; i++) {\n      this.addObjectToWorld(new Plate(this, null, initValues))\n    }\n  }\n\n  // attach newly connected player to next available paddle\n  serverSidePlayerJoined (ev) {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    let joined = false\n\n    plates.forEach(plate => {\n      if (joined) {\n        return\n      }\n\n      if (plate.playerId === 0) {\n        plate.playerId = ev.playerId\n\n        joined = true\n      }\n    })\n  }\n\n  serverSidePlayerDisconnected (ev) {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    plates.forEach(plate => {\n      if (plate.playerId !== ev.playerId) {\n        return\n      }\n      this.removeObjectFromWorld(plate.id)\n    })\n  }\n\n  //\n  // CLIENT ONLY CODE\n  //\n  clientSideInit () {\n    initBites(this)\n\n    initPlayers(this)\n  }\n\n  clientSideDraw () {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    if (!plates.length) {\n      return\n    }\n\n    plates.forEach((plate, i) => {\n      const plateElement = document.querySelector('#player' + i)\n\n      if (plateElement && plate.playerId) {\n        plateElement.classList.remove('hidden')\n        plateElement.style.width = PLAYER_WIDTH_BUFFER + ((PLATE_BITES - plate.bites) * BITE_WIDTH) + 'px'\n        plateElement.innerHTML = [plate.playerId, plate.count, plate.bites].join(' ')\n      }\n    })\n  }\n}\n"],"file":"Game.js"}