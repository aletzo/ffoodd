{"version":3,"sources":["../../src/common/Game.js"],"names":["Plate","gameEngine","options","props","bites","blocked","canAttack","count","isWinner","name","playerId","playing","other","Object","assign","type","BaseTypes","TYPES","INT8","STRING","DynamicObject","Game","physicsEngine","SimplePhysicsEngine","on","gameLogic","bind","serverSideInit","serverSidePlayerJoined","serverSidePlayerDisconnected","clientSideInit","clientSideDraw","serializer","registerClass","plates","world","queryObjects","instanceType","length","forEach","p","i","PLATE_BITES","COUNTS_TO_WIN","inputData","plate","queryObject","input","plateOnTheLeft","setInterval","BLOCKED_TIME_FROM_KICK","plateOnTheRight","otherPlates","filter","map","BLOCKED_TIME_FROM_ATTACK","initValues","PLAYERS_COUNT","addObjectToWorld","ev","joined","removeObjectFromWorld","id","console","log","DEBUG","window","addEventListener","returnValue","plateElement","document","querySelector","classList","add","toggle","remove","style","width","PLAYER_WIDTH_BUFFER","BITE_WIDTH","playerInfo","push","innerHTML","concat","join","GameEngine"],"mappings":"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","sourcesContent":["import {\n  BaseTypes,\n  DynamicObject,\n  GameEngine,\n  SimplePhysicsEngine\n} from 'lance-gg'\n\nimport { initBites, initPlayers } from './lib/init-helpers.js'\n\nimport {\n  BITE_WIDTH,\n  BLOCKED_TIME_FROM_ATTACK,\n  BLOCKED_TIME_FROM_KICK,\n  COUNTS_TO_WIN,\n  DEBUG,\n  PLATE_BITES,\n  PLAYER_WIDTH_BUFFER,\n  PLAYERS_COUNT\n} from './lib/constants.js'\n\n// A paddle has a health attribute\nclass Plate extends DynamicObject {\n  constructor (gameEngine, options, props) {\n    super(gameEngine, options, props)\n\n    this.bites = 0\n    this.blocked = 0\n    this.canAttack = 0\n    this.count = 0\n    this.isWinner = 0\n    this.name = ''\n    this.playerId = 0\n    this.playing = 0\n  }\n\n  static get netScheme () {\n    return Object.assign({\n      bites: { type: BaseTypes.TYPES.INT8 },\n      blocked: { type: BaseTypes.TYPES.INT8 },\n      canAttack: { type: BaseTypes.TYPES.INT8 },\n      count: { type: BaseTypes.TYPES.INT8 },\n      isWinner: { type: BaseTypes.TYPES.INT8 },\n      name: { type: BaseTypes.TYPES.STRING },\n      playerId: { type: BaseTypes.TYPES.INT8 },\n      playing: { type: BaseTypes.TYPES.INT8 }\n    }, super.netScheme)\n  }\n\n  syncTo (other) {\n    super.syncTo(other)\n\n    this.bites = other.bites\n    this.blocked = other.blocked\n    this.canAttack = other.count\n    this.count = other.count\n    this.isWinner = other.isWinner\n    this.name = other.name\n    this.playerId = other.playerId\n    this.playing = other.playing\n  }\n}\n\nexport default class Game extends GameEngine {\n  constructor (options) {\n    super(options)\n    this.physicsEngine = new SimplePhysicsEngine({ gameEngine: this })\n\n    // common code\n    this.on('postStep', this.gameLogic.bind(this))\n\n    // server-only code\n    this.on('server__init', this.serverSideInit.bind(this))\n    this.on('server__playerJoined', this.serverSidePlayerJoined.bind(this))\n    this.on('server__playerDisconnected', this.serverSidePlayerDisconnected.bind(this))\n\n    // client-only code\n    this.on('client__rendererReady', this.clientSideInit.bind(this))\n    this.on('client__draw', this.clientSideDraw.bind(this))\n  }\n\n  registerClasses (serializer) {\n    serializer.registerClass(Plate)\n  }\n\n  gameLogic () {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    if (plates.length < 2) {\n      return\n    }\n\n    plates.forEach((p, i) => {\n      if (p.bites === PLATE_BITES) {\n        p.count++\n        p.canAttack = 1\n        p.bites = 0\n\n        if (p.count === COUNTS_TO_WIN) {\n          p.blocked = 1\n          p.playing = 0\n          p.isWinner = 1\n        }\n      }\n    })\n  }\n\n  processInput (inputData, playerId) {\n    super.processInput(inputData, playerId)\n\n    // get the player paddle tied to the player socket\n    const plate = this.world.queryObject({ playerId })\n\n    if (!plate || !plate.playing) {\n      return\n    }\n\n    if (plate.blocked === 1) {\n      return\n    }\n\n    if (inputData.input === 'bite') {\n      plate.bites++\n    }\n\n    if (inputData.input === 'kickLeft') {\n      const plateOnTheLeft = this.world.queryObject({ playerId: playerId - 1 })\n\n      if (plateOnTheLeft) {\n        plateOnTheLeft.blocked = 1\n\n        setInterval(() => { plateOnTheLeft.blocked = 0 }, BLOCKED_TIME_FROM_KICK)\n      }\n    }\n\n    if (inputData.input === 'kickRight') {\n      const plateOnTheRight = this.world.queryObject({ playerId: playerId + 1 })\n\n      if (plateOnTheRight) {\n        plateOnTheRight.blocked = 1\n\n        setInterval(() => { plateOnTheRight.blocked = 0 }, BLOCKED_TIME_FROM_KICK)\n      }\n    }\n\n    if (plate.canAttack && inputData.input === 'attack') {\n      plate.canAttack = 0\n\n      const plates = this.world.queryObjects({ instanceType: Plate })\n\n      const otherPlates = plates.filter(p => p.playerId !== playerId)\n\n      otherPlates.map(p => { p.blocked = 1 })\n\n      setInterval(() => otherPlates.map(p => { p.blocked = 0 }), BLOCKED_TIME_FROM_ATTACK)\n    }\n  }\n\n  //\n  // SERVER ONLY CODE\n  //\n  serverSideInit () {\n    const initValues = {\n      bites: 0,\n      blocked: 1,\n      count: 0,\n      isWinner: 0,\n      name: '',\n      playerId: 0,\n      playing: 0\n    }\n\n    for (let i = 0; i < PLAYERS_COUNT; i++) {\n      this.addObjectToWorld(new Plate(this, null, initValues))\n    }\n  }\n\n  // attach newly connected player to next available paddle\n  serverSidePlayerJoined (ev) {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    let joined = false\n\n    plates.filter(p => p.playerId === 0).forEach(plate => {\n      if (joined) {\n        return\n      }\n\n      if (plate.playerId === 0) {\n        plate.playerId = ev.playerId\n\n        joined = true\n      }\n    })\n  }\n\n  serverSidePlayerDisconnected (ev) {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    plates.forEach(plate => {\n      if (plate.playerId !== ev.playerId) {\n        return\n      }\n      this.removeObjectFromWorld(plate.id)\n    })\n  }\n\n  //\n  // CLIENT ONLY CODE\n  //\n  clientSideInit () {\n    initBites(this)\n\n    console.log('this')\n    console.log(this)\n\n    initPlayers(this)\n\n    if (!DEBUG) {\n      window.addEventListener('beforeunload', ev => {\n        ev.returnValue = 'Are you sure you want to leave the game?'\n      })\n    }\n  }\n\n  clientSideDraw () {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    // const winner = plates.reduce((w, p) => p.isWinner === 1 ? p.playerId : '')\n\n    plates.filter(p => p.playerId !== 0).forEach((plate, i) => {\n      const plateElement = document.querySelector('#player' + i)\n\n      if (!plateElement) {\n        return\n      }\n\n      if (!plate.playerId) {\n        plateElement.classList.add('hidden')\n        return\n      }\n\n      if (plate.isWinner) {\n        plateElement.classList.add('winner')\n      }\n\n      plateElement.classList.toggle('blocked', plate.blocked)\n      plateElement.classList.toggle('canAttack', plate.blocked)\n      plateElement.classList.toggle('playing', plate.playing)\n\n      plateElement.classList.remove('hidden')\n\n      plateElement.style.width = PLAYER_WIDTH_BUFFER + ((PLATE_BITES - plate.bites) * BITE_WIDTH) + 'px'\n\n      const playerInfo = []\n\n      if (DEBUG) {\n        playerInfo.push(plate.playerId)\n      }\n\n      plateElement.innerHTML = playerInfo\n        .concat(plate.name, plate.count, plate.bites)\n        .join(' ')\n    })\n  }\n}\n"],"file":"Game.js"}