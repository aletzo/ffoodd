{"version":3,"sources":["../../src/common/Game.js"],"names":["PADDING","WIDTH","HEIGHT","PADDLE_WIDTH","PADDLE_HEIGHT","Plate","gameEngine","options","props","bites","other","Object","assign","type","BaseTypes","TYPES","INT16","DynamicObject","Game","physicsEngine","SimplePhysicsEngine","on","gameLogic","bind","serverSideInit","serverSidePlayerJoined","serverSidePlayerDisconnected","clientSideInit","clientSideDraw","serializer","registerClass","plates","world","queryObjects","instanceType","length","forEach","p","i","console","log","inputData","playerId","playerPlate","queryObject","input","addObjectToWorld","ev","joined","plate","removeObjectFromWorld","id","controls","KeyboardControls","renderer","clientEngine","document","querySelectorAll","button","addEventListener","sendInput","classList","add","selector","plateElement","querySelector","remove","style","width","innerHTML","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, BaseTypes, TwoVector, DynamicObject, KeyboardControls, SimplePhysicsEngine } from 'lance-gg';\n\nconst PADDING = 30;\nconst WIDTH = 400;\nconst HEIGHT = 400;\nconst PADDLE_WIDTH = 10;\nconst PADDLE_HEIGHT = 50;\n\n// A paddle has a health attribute\nclass Plate extends DynamicObject {\n\n    constructor(gameEngine, options, props) {\n        super(gameEngine, options, props);\n        this.bites = 0;\n    }\n\n    static get netScheme() {\n        return Object.assign({\n            bites: { type: BaseTypes.TYPES.INT16 }\n        }, super.netScheme);\n    }\n\n    syncTo(other) {\n        super.syncTo(other);\n        this.bites = other.bites;\n    }\n}\n\nexport default class Game extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({ gameEngine: this });\n\n        // common code\n        this.on('postStep', this.gameLogic.bind(this));\n\n        // server-only code\n        this.on('server__init', this.serverSideInit.bind(this));\n        this.on('server__playerJoined', this.serverSidePlayerJoined.bind(this));\n        this.on('server__playerDisconnected', this.serverSidePlayerDisconnected.bind(this));\n\n        // client-only code\n        this.on('client__rendererReady', this.clientSideInit.bind(this));\n        this.on('client__draw', this.clientSideDraw.bind(this));\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Plate);\n    }\n\n    gameLogic() {\n        let plates = this.world.queryObjects({ instanceType: Plate });\n\n        if (plates.length < 2) return;\n\n        plates.forEach((p, i) => {\n            if (p.bites === 9) {\n                console.log(`player ${i} wins`);\n            }\n        })\n    }\n\n    processInput(inputData, playerId) {\n        super.processInput(inputData, playerId);\n\n        // get the player paddle tied to the player socket\n        let playerPlate = this.world.queryObject({ playerId });\n        if (playerPlate) {\n            if (inputData.input === 'bite') {\n                playerPlate.bites++;\n            }\n        }\n    }\n\n    //\n    // SERVER ONLY CODE\n    //\n    serverSideInit() {\n        // create the paddles and the ball\n        this.addObjectToWorld(new Plate(this, null, { playerId: 0, bites: 0 }));\n        this.addObjectToWorld(new Plate(this, null, { playerId: 0, bites: 0 }));\n        this.addObjectToWorld(new Plate(this, null, { playerId: 0, bites: 0 }));\n        this.addObjectToWorld(new Plate(this, null, { playerId: 0, bites: 0 }));\n        this.addObjectToWorld(new Plate(this, null, { playerId: 0, bites: 0 }));\n        this.addObjectToWorld(new Plate(this, null, { playerId: 0, bites: 0 }));\n    }\n\n    // attach newly connected player to next available paddle\n    serverSidePlayerJoined(ev) {\n        const plates = this.world.queryObjects({ instanceType: Plate });\n\n        let joined = false;\n\n        plates.forEach(plate => {\n            if (joined) {\n                return;\n            }\n\n            if (plate.playerId === 0) {\n                plate.playerId = ev.playerId;\n\n                joined = true;\n            }\n        })\n    }\n\n    serverSidePlayerDisconnected(ev) {\n        const plates = this.world.queryObjects({ instanceType: Plate });\n\n        plates.forEach(plate => {\n            if (plate.playerId !== ev.playerId) {\n                return;\n            }\n            this.removeObjectFromWorld(plate.id);\n        });\n    }\n\n    //\n    // CLIENT ONLY CODE\n    //\n    clientSideInit() {\n        this.controls = new KeyboardControls(this.renderer.clientEngine);\n\n        document.querySelectorAll('button.bite').forEach(button => {\n            button.addEventListener('click', ev => {\n                this.controls.clientEngine.sendInput('bite');\n\n                button.classList.add('hidden');\n            });\n        });\n\n    }\n\n    clientSideDraw() {\n        let plates = this.world.queryObjects({ instanceType: Plate });\n\n        if (!plates.length) {\n            return;\n        }\n\n        plates.forEach((plate, i) => {\n            const selector = '#plate' + i;\n\n            const plateElement = document.querySelector(selector);\n\n            if (plateElement) {\n                plateElement.classList.remove('hidden');\n                plateElement.style.width = ((9 - plate.bites) * 20) + 'px';\n                plateElement.innerHTML = plate.playerId;\n            }\n        });\n    }\n}\n\n"],"file":"Game.js"}