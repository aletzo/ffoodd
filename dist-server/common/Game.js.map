{"version":3,"sources":["../../src/common/Game.js"],"names":["Plate","gameEngine","options","props","bites","blocked","count","isWinner","name","playerId","playing","other","Object","assign","type","BaseTypes","TYPES","INT8","STRING","DynamicObject","Game","physicsEngine","SimplePhysicsEngine","on","gameLogic","bind","serverSideInit","serverSidePlayerJoined","serverSidePlayerDisconnected","clientSideInit","clientSideDraw","serializer","registerClass","plates","world","queryObjects","instanceType","length","forEach","p","i","PLATE_BITES","COUNTS_TO_WIN","inputData","plate","queryObject","input","initValues","PLAYERS_COUNT","addObjectToWorld","ev","joined","filter","removeObjectFromWorld","id","window","addEventListener","returnValue","plateElement","document","querySelector","classList","remove","style","width","PLAYER_WIDTH_BUFFER","BITE_WIDTH","playerInfo","DEBUG","push","innerHTML","concat","join","GameEngine"],"mappings":"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","sourcesContent":["import {\n  BaseTypes,\n  DynamicObject,\n  GameEngine,\n  SimplePhysicsEngine\n} from 'lance-gg'\n\nimport { initBites, initPlayers } from './lib/init-helpers.js'\n\nimport {\n  BITE_WIDTH,\n  COUNTS_TO_WIN,\n  DEBUG,\n  PLATE_BITES,\n  PLAYER_WIDTH_BUFFER,\n  PLAYERS_COUNT\n} from './lib/constants.js'\n\n// A paddle has a health attribute\nclass Plate extends DynamicObject {\n  constructor (gameEngine, options, props) {\n    super(gameEngine, options, props)\n\n    this.bites = 0\n    this.blocked = 0\n    this.count = 0\n    this.isWinner = 0\n    this.name = ''\n    this.playerId = 0\n    this.playing = 0\n  }\n\n  static get netScheme () {\n    return Object.assign({\n      bites: { type: BaseTypes.TYPES.INT8 },\n      blocked: { type: BaseTypes.TYPES.INT8 },\n      count: { type: BaseTypes.TYPES.INT8 },\n      isWinner: { type: BaseTypes.TYPES.INT8 },\n      name: { type: BaseTypes.TYPES.STRING },\n      playerId: { type: BaseTypes.TYPES.INT8 },\n      playing: { type: BaseTypes.TYPES.INT8 }\n    }, super.netScheme)\n  }\n\n  syncTo (other) {\n    super.syncTo(other)\n\n    this.bites = other.bites\n    this.blocked = other.blocked\n    this.count = other.count\n    this.isWinner = other.isWinner\n    this.name = other.name\n    this.playerId = other.playerId\n    this.playing = other.playing\n  }\n}\n\nexport default class Game extends GameEngine {\n  constructor (options) {\n    super(options)\n    this.physicsEngine = new SimplePhysicsEngine({ gameEngine: this })\n\n    // common code\n    this.on('postStep', this.gameLogic.bind(this))\n\n    // server-only code\n    this.on('server__init', this.serverSideInit.bind(this))\n    this.on('server__playerJoined', this.serverSidePlayerJoined.bind(this))\n    this.on('server__playerDisconnected', this.serverSidePlayerDisconnected.bind(this))\n\n    // client-only code\n    this.on('client__rendererReady', this.clientSideInit.bind(this))\n    this.on('client__draw', this.clientSideDraw.bind(this))\n  }\n\n  registerClasses (serializer) {\n    serializer.registerClass(Plate)\n  }\n\n  gameLogic () {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    if (plates.length < 2) {\n      return\n    }\n\n    plates.forEach((p, i) => {\n      if (p.bites === PLATE_BITES) {\n        p.count++\n        p.bites = 0\n\n        if (p.count === COUNTS_TO_WIN) {\n          p.blocked = 1\n          p.playing = 0\n          p.isWinner = 1\n        }\n      }\n    })\n  }\n\n  processInput (inputData, playerId) {\n    super.processInput(inputData, playerId)\n\n    // get the player paddle tied to the player socket\n    const plate = this.world.queryObject({ playerId })\n\n    if (plate) {\n      if (\n      /*\n          plate.playing === 1 &&\n          plate.blocked === 0 &&\n          */\n        inputData.input === 'bite'\n      ) {\n        plate.bites++\n      }\n    }\n  }\n\n  //\n  // SERVER ONLY CODE\n  //\n  serverSideInit () {\n    const initValues = {\n      bites: 0,\n      blocked: 1,\n      count: 0,\n      isWinner: 0,\n      name: '',\n      playerId: 0,\n      playing: 0\n    }\n\n    for (let i = 0; i < PLAYERS_COUNT; i++) {\n      this.addObjectToWorld(new Plate(this, null, initValues))\n    }\n  }\n\n  // attach newly connected player to next available paddle\n  serverSidePlayerJoined (ev) {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    let joined = false\n\n    plates.filter(p => p.playerId === 0).forEach(plate => {\n      if (joined) {\n        return\n      }\n\n      if (plate.playerId === 0) {\n        plate.playerId = ev.playerId\n\n        joined = true\n      }\n    })\n  }\n\n  serverSidePlayerDisconnected (ev) {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    plates.forEach(plate => {\n      if (plate.playerId !== ev.playerId) {\n        return\n      }\n      this.removeObjectFromWorld(plate.id)\n    })\n  }\n\n  //\n  // CLIENT ONLY CODE\n  //\n  clientSideInit () {\n    initBites(this)\n\n    initPlayers(this)\n\n    window.addEventListener('beforeunload', ev => {\n      ev.returnValue = 'Are you sure you want to leave the game?'\n    })\n  }\n\n  clientSideDraw () {\n    const plates = this.world.queryObjects({ instanceType: Plate })\n\n    // const winner = plates.reduce((w, p) => p.isWinner === 1 ? p.playerId : '')\n\n    plates.filter(p => p.playerId !== 0).forEach((plate, i) => {\n      const plateElement = document.querySelector('#player' + i)\n\n      if (!plateElement || !plate.playerId) {\n        return\n      }\n\n      plateElement.classList.remove('hidden')\n      plateElement.style.width = PLAYER_WIDTH_BUFFER + ((PLATE_BITES - plate.bites) * BITE_WIDTH) + 'px'\n\n      const playerInfo = []\n\n      if (DEBUG) {\n        playerInfo.push(plate.playerId)\n      }\n\n      plateElement.innerHTML = playerInfo\n        .concat(plate.name, plate.count, plate.bites)\n        .join(' ')\n    })\n  }\n}\n"],"file":"Game.js"}